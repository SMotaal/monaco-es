{"version":3,"file":"ruby.js","sources":["../../node_modules/monaco-editor/esm/vs/basic-languages/ruby/ruby.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    comments: {\n        lineComment: '#',\n        blockComment: ['=begin', '=end'],\n    },\n    brackets: [\n        ['(', ')'],\n        ['{', '}'],\n        ['[', ']']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ]\n};\n/*\n * Ruby language definition\n *\n * Quite a complex language due to elaborate escape sequences\n * and quoting of literate strings/regular expressions, and\n * an 'end' keyword that does not always apply to modifiers like until and while,\n * and a 'do' keyword that sometimes starts a block, but sometimes is part of\n * another statement (like 'while').\n *\n * (1) end blocks:\n * 'end' may end declarations like if or until, but sometimes 'if' or 'until'\n * are modifiers where there is no 'end'. Also, 'do' sometimes starts a block\n * that is ended by 'end', but sometimes it is part of a 'while', 'for', or 'until'\n * To do proper brace matching we do some elaborate state manipulation.\n * some examples:\n *\n *   until bla do\n *     work until tired\n *     list.each do\n *       something if test\n *     end\n *   end\n *\n * or\n *\n * if test\n *  something (if test then x end)\n *  bar if bla\n * end\n *\n * or, how about using class as a property..\n *\n * class Test\n *   def endpoint\n *     self.class.endpoint || routes\n *   end\n * end\n *\n * (2) quoting:\n * there are many kinds of strings and escape sequences. But also, one can\n * start many string-like things as '%qx' where q specifies the kind of string\n * (like a command, escape expanded, regular expression, symbol etc.), and x is\n * some character and only another 'x' ends the sequence. Except for brackets\n * where the closing bracket ends the sequence.. and except for a nested bracket\n * inside the string like entity. Also, such strings can contain interpolated\n * ruby expressions again (and span multiple lines). Moreover, expanded\n * regular expression can also contain comments.\n */\nexport var language = {\n    tokenPostfix: '.ruby',\n    keywords: [\n        '__LINE__', '__ENCODING__', '__FILE__', 'BEGIN', 'END', 'alias', 'and', 'begin',\n        'break', 'case', 'class', 'def', 'defined?', 'do', 'else', 'elsif', 'end',\n        'ensure', 'for', 'false', 'if', 'in', 'module', 'next', 'nil', 'not', 'or', 'redo',\n        'rescue', 'retry', 'return', 'self', 'super', 'then', 'true', 'undef', 'unless',\n        'until', 'when', 'while', 'yield',\n    ],\n    keywordops: [\n        '::', '..', '...', '?', ':', '=>'\n    ],\n    builtins: [\n        'require', 'public', 'private', 'include', 'extend', 'attr_reader',\n        'protected', 'private_class_method', 'protected_class_method', 'new'\n    ],\n    // these are closed by 'end' (if, while and until are handled separately)\n    declarations: [\n        'module', 'class', 'def', 'case', 'do', 'begin', 'for', 'if', 'while', 'until', 'unless'\n    ],\n    linedecls: [\n        'def', 'case', 'do', 'begin', 'for', 'if', 'while', 'until', 'unless'\n    ],\n    operators: [\n        '^', '&', '|', '<=>', '==', '===', '!~', '=~', '>', '>=', '<', '<=', '<<', '>>', '+',\n        '-', '*', '/', '%', '**', '~', '+@', '-@', '[]', '[]=', '`',\n        '+=', '-=', '*=', '**=', '/=', '^=', '%=', '<<=', '>>=', '&=', '&&=', '||=', '|='\n    ],\n    brackets: [\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' }\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\n    // escape sequences\n    escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\n    escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\n    decpart: /\\d(_?\\d)*/,\n    decimal: /0|@decpart/,\n    delim: /[^a-zA-Z0-9\\s\\n\\r]/,\n    heredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\n    regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n    regexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        // Main entry.\n        // root.<decl> where decl is the current opening declaration (like 'class')\n        root: [\n            // identifiers and keywords\n            // most complexity here is due to matching 'end' correctly with declarations.\n            // We distinguish a declaration that comes first on a line, versus declarations further on a line (which are most likey modifiers)\n            [/^(\\s*)([a-z_]\\w*[!?=]?)/, ['white',\n                    {\n                        cases: {\n                            'for|until|while': { token: 'keyword.$2', next: '@dodecl.$2' },\n                            '@declarations': { token: 'keyword.$2', next: '@root.$2' },\n                            'end': { token: 'keyword.$S2', next: '@pop' },\n                            '@keywords': 'keyword',\n                            '@builtins': 'predefined',\n                            '@default': 'identifier'\n                        }\n                    }]],\n            [/[a-z_]\\w*[!?=]?/,\n                {\n                    cases: {\n                        'if|unless|while|until': { token: 'keyword.$0x', next: '@modifier.$0x' },\n                        'for': { token: 'keyword.$2', next: '@dodecl.$2' },\n                        '@linedecls': { token: 'keyword.$0', next: '@root.$0' },\n                        'end': { token: 'keyword.$S2', next: '@pop' },\n                        '@keywords': 'keyword',\n                        '@builtins': 'predefined',\n                        '@default': 'identifier'\n                    }\n                }],\n            [/[A-Z][\\w]*[!?=]?/, 'constructor.identifier'],\n            [/\\$[\\w]*/, 'global.constant'],\n            [/@[\\w]*/, 'namespace.instance.identifier'],\n            [/@@[\\w]*/, 'namespace.class.identifier'],\n            // here document\n            [/<<[-~](@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\n            [/[ \\t\\r\\n]+<<(@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\n            [/^<<(@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\n            // whitespace\n            { include: '@whitespace' },\n            // strings\n            [/\"/, { token: 'string.d.delim', next: '@dstring.d.\"' }],\n            [/'/, { token: 'string.sq.delim', next: '@sstring.sq' }],\n            // % literals. For efficiency, rematch in the 'pstring' state\n            [/%([rsqxwW]|Q?)/, { token: '@rematch', next: 'pstring' }],\n            // commands and symbols\n            [/`/, { token: 'string.x.delim', next: '@dstring.x.`' }],\n            [/:(\\w|[$@])\\w*[!?=]?/, 'string.s'],\n            [/:\"/, { token: 'string.s.delim', next: '@dstring.s.\"' }],\n            [/:'/, { token: 'string.s.delim', next: '@sstring.s' }],\n            // regular expressions. Lookahead for a (not escaped) closing forwardslash on the same line\n            [/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, { token: 'regexp.delim', next: '@regexp' }],\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/@symbols/, {\n                    cases: {\n                        '@keywordops': 'keyword',\n                        '@operators': 'operator',\n                        '@default': ''\n                    }\n                }],\n            [/[;,]/, 'delimiter'],\n            // numbers\n            [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, 'number.hex'],\n            [/0[_oO][0-7](_?[0-7])*/, 'number.octal'],\n            [/0[bB][01](_?[01])*/, 'number.binary'],\n            [/0[dD]@decpart/, 'number'],\n            [/@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/, {\n                    cases: {\n                        '$1': 'number.float',\n                        '@default': 'number'\n                    }\n                }],\n        ],\n        // used to not treat a 'do' as a block opener if it occurs on the same\n        // line as a 'do' statement: 'while|until|for'\n        // dodecl.<decl> where decl is the declarations started, like 'while'\n        dodecl: [\n            [/^/, { token: '', switchTo: '@root.$S2' }],\n            [/[a-z_]\\w*[!?=]?/, {\n                    cases: {\n                        'end': { token: 'keyword.$S2', next: '@pop' },\n                        'do': { token: 'keyword', switchTo: '@root.$S2' },\n                        '@linedecls': { token: '@rematch', switchTo: '@root.$S2' },\n                        '@keywords': 'keyword',\n                        '@builtins': 'predefined',\n                        '@default': 'identifier'\n                    }\n                }],\n            { include: '@root' }\n        ],\n        // used to prevent potential modifiers ('if|until|while|unless') to match\n        // with 'end' keywords.\n        // modifier.<decl>x where decl is the declaration starter, like 'if'\n        modifier: [\n            [/^/, '', '@pop'],\n            [/[a-z_]\\w*[!?=]?/, {\n                    cases: {\n                        'end': { token: 'keyword.$S2', next: '@pop' },\n                        'then|else|elsif|do': { token: 'keyword', switchTo: '@root.$S2' },\n                        '@linedecls': { token: '@rematch', switchTo: '@root.$S2' },\n                        '@keywords': 'keyword',\n                        '@builtins': 'predefined',\n                        '@default': 'identifier'\n                    }\n                }],\n            { include: '@root' }\n        ],\n        // single quote strings (also used for symbols)\n        // sstring.<kind>  where kind is 'sq' (single quote) or 's' (symbol)\n        sstring: [\n            [/[^\\\\']+/, 'string.$S2'],\n            [/\\\\\\\\|\\\\'|\\\\$/, 'string.$S2.escape'],\n            [/\\\\./, 'string.$S2.invalid'],\n            [/'/, { token: 'string.$S2.delim', next: '@pop' }]\n        ],\n        // double quoted \"string\".\n        // dstring.<kind>.<delim> where kind is 'd' (double quoted), 'x' (command), or 's' (symbol)\n        // and delim is the ending delimiter (\" or `)\n        dstring: [\n            [/[^\\\\`\"#]+/, 'string.$S2'],\n            [/#/, 'string.$S2.escape', '@interpolated'],\n            [/\\\\$/, 'string.$S2.escape'],\n            [/@escapes/, 'string.$S2.escape'],\n            [/\\\\./, 'string.$S2.escape.invalid'],\n            [/[`\"]/, {\n                    cases: {\n                        '$#==$S3': { token: 'string.$S2.delim', next: '@pop' },\n                        '@default': 'string.$S2'\n                    }\n                }]\n        ],\n        // literal documents\n        // heredoc.<close> where close is the closing delimiter\n        heredoc: [\n            [/^(\\s*)(@heredelim)$/, {\n                    cases: {\n                        '$2==$S2': ['string.heredoc', { token: 'string.heredoc.delimiter', next: '@pop' }],\n                        '@default': ['string.heredoc', 'string.heredoc']\n                    }\n                }],\n            [/.*/, 'string.heredoc'],\n        ],\n        // interpolated sequence\n        interpolated: [\n            [/\\$\\w*/, 'global.constant', '@pop'],\n            [/@\\w*/, 'namespace.class.identifier', '@pop'],\n            [/@@\\w*/, 'namespace.instance.identifier', '@pop'],\n            [/[{]/, { token: 'string.escape.curly', switchTo: '@interpolated_compound' }],\n            ['', '', '@pop'],\n        ],\n        // any code\n        interpolated_compound: [\n            [/[}]/, { token: 'string.escape.curly', next: '@pop' }],\n            { include: '@root' },\n        ],\n        // %r quoted regexp\n        // pregexp.<open>.<close> where open/close are the open/close delimiter\n        pregexp: [\n            { include: '@whitespace' },\n            // turns out that you can quote using regex control characters, aargh!\n            // for example; %r|kgjgaj| is ok (even though | is used for alternation)\n            // so, we need to match those first\n            [/[^\\(\\{\\[\\\\]/, {\n                    cases: {\n                        '$#==$S3': { token: 'regexp.delim', next: '@pop' },\n                        '$#==$S2': { token: 'regexp.delim', next: '@push' },\n                        '~[)}\\\\]]': '@brackets.regexp.escape.control',\n                        '~@regexpctl': 'regexp.escape.control',\n                        '@default': 'regexp'\n                    }\n                }],\n            { include: '@regexcontrol' },\n        ],\n        // We match regular expression quite precisely\n        regexp: [\n            { include: '@regexcontrol' },\n            [/[^\\\\\\/]/, 'regexp'],\n            ['/[ixmp]*', { token: 'regexp.delim' }, '@pop'],\n        ],\n        regexcontrol: [\n            [/(\\{)(\\d+(?:,\\d*)?)(\\})/, ['@brackets.regexp.escape.control', 'regexp.escape.control', '@brackets.regexp.escape.control']],\n            [/(\\[)(\\^?)/, ['@brackets.regexp.escape.control', { token: 'regexp.escape.control', next: '@regexrange' }]],\n            [/(\\()(\\?[:=!])/, ['@brackets.regexp.escape.control', 'regexp.escape.control']],\n            [/\\(\\?#/, { token: 'regexp.escape.control', next: '@regexpcomment' }],\n            [/[()]/, '@brackets.regexp.escape.control'],\n            [/@regexpctl/, 'regexp.escape.control'],\n            [/\\\\$/, 'regexp.escape'],\n            [/@regexpesc/, 'regexp.escape'],\n            [/\\\\\\./, 'regexp.invalid'],\n            [/#/, 'regexp.escape', '@interpolated'],\n        ],\n        regexrange: [\n            [/-/, 'regexp.escape.control'],\n            [/\\^/, 'regexp.invalid'],\n            [/\\\\$/, 'regexp.escape'],\n            [/@regexpesc/, 'regexp.escape'],\n            [/[^\\]]/, 'regexp'],\n            [/\\]/, '@brackets.regexp.escape.control', '@pop'],\n        ],\n        regexpcomment: [\n            [/[^)]+/, 'comment'],\n            [/\\)/, { token: 'regexp.escape.control', next: '@pop' }]\n        ],\n        // % quoted strings\n        // A bit repetitive since we need to often special case the kind of ending delimiter\n        pstring: [\n            [/%([qws])\\(/, { token: 'string.$1.delim', switchTo: '@qstring.$1.(.)' }],\n            [/%([qws])\\[/, { token: 'string.$1.delim', switchTo: '@qstring.$1.[.]' }],\n            [/%([qws])\\{/, { token: 'string.$1.delim', switchTo: '@qstring.$1.{.}' }],\n            [/%([qws])</, { token: 'string.$1.delim', switchTo: '@qstring.$1.<.>' }],\n            [/%([qws])(@delim)/, { token: 'string.$1.delim', switchTo: '@qstring.$1.$2.$2' }],\n            [/%r\\(/, { token: 'regexp.delim', switchTo: '@pregexp.(.)' }],\n            [/%r\\[/, { token: 'regexp.delim', switchTo: '@pregexp.[.]' }],\n            [/%r\\{/, { token: 'regexp.delim', switchTo: '@pregexp.{.}' }],\n            [/%r</, { token: 'regexp.delim', switchTo: '@pregexp.<.>' }],\n            [/%r(@delim)/, { token: 'regexp.delim', switchTo: '@pregexp.$1.$1' }],\n            [/%(x|W|Q?)\\(/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.(.)' }],\n            [/%(x|W|Q?)\\[/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.[.]' }],\n            [/%(x|W|Q?)\\{/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.{.}' }],\n            [/%(x|W|Q?)</, { token: 'string.$1.delim', switchTo: '@qqstring.$1.<.>' }],\n            [/%(x|W|Q?)(@delim)/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.$2.$2' }],\n            [/%([rqwsxW]|Q?)./, { token: 'invalid', next: '@pop' }],\n            [/./, { token: 'invalid', next: '@pop' }],\n        ],\n        // non-expanded quoted string.\n        // qstring.<kind>.<open>.<close>\n        //  kind = q|w|s  (single quote, array, symbol)\n        //  open = open delimiter\n        //  close = close delimiter\n        qstring: [\n            [/\\\\$/, 'string.$S2.escape'],\n            [/\\\\./, 'string.$S2.escape'],\n            [/./, {\n                    cases: {\n                        '$#==$S4': { token: 'string.$S2.delim', next: '@pop' },\n                        '$#==$S3': { token: 'string.$S2.delim', next: '@push' },\n                        '@default': 'string.$S2'\n                    }\n                }],\n        ],\n        // expanded quoted string.\n        // qqstring.<kind>.<open>.<close>\n        //  kind = Q|W|x  (double quote, array, command)\n        //  open = open delimiter\n        //  close = close delimiter\n        qqstring: [\n            [/#/, 'string.$S2.escape', '@interpolated'],\n            { include: '@qstring' }\n        ],\n        // whitespace & comments\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/^\\s*=begin\\b/, 'comment', '@comment'],\n            [/#.*$/, 'comment'],\n        ],\n        comment: [\n            [/[^=]+/, 'comment'],\n            [/^\\s*=begin\\b/, 'comment.invalid'],\n            [/^\\s*=end\\b.*/, 'comment', '@pop'],\n            [/[=]/, 'comment']\n        ],\n    }\n};\n"],"names":[],"mappings":"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"}