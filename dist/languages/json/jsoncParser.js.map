{"version":3,"file":"jsoncParser.js","sources":["../../../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js","../../../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js","../../../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js","../../../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/edit.js","../../../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var pos = 0, len = text.length, value = '', tokenOffset = 0, token = 16 /* Unknown */, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                ch = text.charCodeAt(pos++);\n                switch (ch) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch_1 = scanHexDigits(4, true);\n                        if (ch_1 >= 0) {\n                            result += String.fromCharCode(ch_1);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var commentClosed = false;\n                    while (pos < len) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && (pos + 1 < len) && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenError: function () { return scanError; }\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n//# sourceMappingURL=scanner.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\nexport function format(documentText, range, options) {\n    var initialIndentLevel;\n    var formatText;\n    var formatTextStart;\n    var rangeStart;\n    var rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        var endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, 0, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    var eol = getEOL(options, documentText);\n    var lineBreak = false;\n    var indentLevel = 0;\n    var indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    var scanner = createScanner(formatText, false);\n    var hasError = false;\n    function newLineAndIndent() {\n        return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    function scanNext() {\n        var token = scanner.scan();\n        lineBreak = false;\n        while (token === 15 /* Trivia */ || token === 14 /* LineBreakTrivia */) {\n            lineBreak = lineBreak || (token === 14 /* LineBreakTrivia */);\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* Unknown */ || scanner.getTokenError() !== 0 /* None */;\n        return token;\n    }\n    var editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    var firstToken = scanNext();\n    if (firstToken !== 17 /* EOF */) {\n        var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        var initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* EOF */) {\n        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        var secondToken = scanNext();\n        var replaceContent = '';\n        while (!lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n            // comments on the same line: keep them on the same line, but ignore them otherwise\n            var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            replaceContent = secondToken === 12 /* LineCommentTrivia */ ? newLineAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* CloseBraceToken */) {\n            if (firstToken !== 1 /* OpenBraceToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else if (secondToken === 4 /* CloseBracketToken */) {\n            if (firstToken !== 3 /* OpenBracketToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* OpenBracketToken */:\n                case 1 /* OpenBraceToken */:\n                    indentLevel++;\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 5 /* CommaToken */:\n                case 12 /* LineCommentTrivia */:\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    if (lineBreak) {\n                        replaceContent = newLineAndIndent();\n                    }\n                    else {\n                        // symbol following comment on the same line: keep on same line, separate with ' '\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 6 /* ColonToken */:\n                    replaceContent = ' ';\n                    break;\n                case 10 /* StringLiteral */:\n                    if (secondToken === 6 /* ColonToken */) {\n                        replaceContent = '';\n                        break;\n                    }\n                // fall through\n                case 7 /* NullKeyword */:\n                case 8 /* TrueKeyword */:\n                case 9 /* FalseKeyword */:\n                case 11 /* NumericLiteral */:\n                case 2 /* CloseBraceToken */:\n                case 4 /* CloseBracketToken */:\n                    if (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */) {\n                        replaceContent = ' ';\n                    }\n                    else if (secondToken !== 5 /* CommaToken */ && secondToken !== 17 /* EOF */) {\n                        hasError = true;\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n                replaceContent = newLineAndIndent();\n            }\n        }\n        var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, offset, options) {\n    var i = 0;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nexport function isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=format.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport function getLocation(text, position) {\n    var segments = []; // strings or numbers\n    var earlyReturnException = new Object();\n    var previousNode = void 0;\n    var previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object'\n    };\n    var isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.columnOffset = void 0;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: function (name, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onArrayBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.push(0);\n            },\n            onArrayEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onLiteralValue: function (value, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getLiteralNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: function (sep, offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.columnOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = void 0;\n                }\n                else if (sep === ',') {\n                    var last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = void 0;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode: previousNode,\n        isAtPropertyKey: isAtPropertyKey,\n        matches: function (pattern) {\n            var k = 0;\n            for (var i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport function parse(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentProperty = null;\n    var currentParent = [];\n    var previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    var visitor = {\n        onObjectBegin: function () {\n            var object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: function (name) {\n            currentProperty = name;\n        },\n        onObjectEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: function () {\n            var array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport function parseTree(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentParent = { type: 'array', offset: -1, length: -1, children: [] }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    var visitor = {\n        onObjectBegin: function (offset) {\n            currentParent = onValue({ type: 'object', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: function (name, offset, length) {\n            currentParent = onValue({ type: 'property', offset: offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset: offset, length: length, parent: currentParent });\n        },\n        onObjectEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: function (offset, length) {\n            currentParent = onValue({ type: 'array', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: function (value, offset, length) {\n            onValue({ type: getLiteralNodeType(value), offset: offset, length: length, parent: currentParent, value: value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: function (sep, offset, length) {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.columnOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    var result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport function findNodeAtLocation(root, path) {\n    if (!root) {\n        return void 0;\n    }\n    var node = root;\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n        var segment = path_1[_i];\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return void 0;\n            }\n            var found = false;\n            for (var _a = 0, _b = node.children; _a < _b.length; _a++) {\n                var propertyNode = _b[_a];\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return void 0;\n            }\n        }\n        else {\n            var index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return void 0;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport function getNodeValue(node) {\n    if (node.type === 'array') {\n        return node.children.map(getNodeValue);\n    }\n    else if (node.type === 'object') {\n        var obj = Object.create(null);\n        for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n            var prop = _a[_i];\n            obj[prop.children[0].value] = getNodeValue(prop.children[1]);\n        }\n        return obj;\n    }\n    return node.value;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport function visit(text, visitor, options) {\n    var _scanner = createScanner(text, false);\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? function () { return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? function (arg) { return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    var disallowComments = options && options.disallowComments;\n    var allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            var token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* InvalidUnicode */:\n                    handleError(14 /* InvalidUnicode */);\n                    break;\n                case 5 /* InvalidEscapeCharacter */:\n                    handleError(15 /* InvalidEscapeCharacter */);\n                    break;\n                case 3 /* UnexpectedEndOfNumber */:\n                    handleError(13 /* UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* UnexpectedEndOfString */:\n                    handleError(12 /* UnexpectedEndOfString */);\n                    break;\n                case 6 /* InvalidCharacter */:\n                    handleError(16 /* InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    handleError(1 /* InvalidSymbol */);\n                    break;\n                case 15 /* Trivia */:\n                case 14 /* LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter, skipUntil) {\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token = _scanner.getToken();\n            while (token !== 17 /* EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        var value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* NumericLiteral */:\n                var value = 0;\n                try {\n                    value = JSON.parse(_scanner.getTokenValue());\n                    if (typeof value !== 'number') {\n                        handleError(2 /* InvalidNumberFormat */);\n                        value = 0;\n                    }\n                }\n                catch (e) {\n                    handleError(2 /* InvalidNumberFormat */);\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* StringLiteral */) {\n            handleError(3 /* PropertyNameExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ColonExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n        }\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        var needsComma = false;\n        while (_scanner.getToken() !== 2 /* CloseBraceToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* CloseBraceToken */) {\n            handleError(7 /* CloseBraceExpected */, [2 /* CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        var needsComma = false;\n        while (_scanner.getToken() !== 4 /* CloseBracketToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (_scanner.getToken() !== 4 /* CloseBracketToken */) {\n            handleError(8 /* CloseBracketExpected */, [4 /* CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* OpenBracketToken */:\n                return parseArray();\n            case 1 /* OpenBraceToken */:\n                return parseObject();\n            case 10 /* StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* EOF */) {\n        return true;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* EOF */) {\n        handleError(9 /* EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport function stripComments(text, replaceCh) {\n    var _scanner = createScanner(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case 12 /* LineCommentTrivia */:\n            case 13 /* BlockCommentTrivia */:\n            case 17 /* EOF */:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== void 0) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== 17 /* EOF */);\n    return parts.join('');\n}\nfunction getLiteralNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        default: return 'null';\n    }\n}\n//# sourceMappingURL=parser.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { format, isEOL } from './format.js';\nimport { parseTree, findNodeAtLocation } from './parser.js';\nexport function removeProperty(text, path, formattingOptions) {\n    return setProperty(text, path, void 0, formattingOptions);\n}\nexport function setProperty(text, path, value, formattingOptions, getInsertionIndex) {\n    var errors = [];\n    var root = parseTree(text, errors);\n    var parent = void 0;\n    var lastSegment = void 0;\n    while (path.length > 0) {\n        lastSegment = path.pop();\n        parent = findNodeAtLocation(root, path);\n        if (parent === void 0 && value !== void 0) {\n            if (typeof lastSegment === 'string') {\n                value = (_a = {}, _a[lastSegment] = value, _a);\n            }\n            else {\n                value = [value];\n            }\n        }\n        else {\n            break;\n        }\n    }\n    if (!parent) {\n        // empty document\n        if (value === void 0) {\n            throw new Error('Can not delete in empty document');\n        }\n        return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, formattingOptions);\n    }\n    else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n        var existing = findNodeAtLocation(parent, [lastSegment]);\n        if (existing !== void 0) {\n            if (value === void 0) {\n                if (!existing.parent) {\n                    throw new Error('Malformed AST');\n                }\n                var propertyIndex = parent.children.indexOf(existing.parent);\n                var removeBegin = void 0;\n                var removeEnd = existing.parent.offset + existing.parent.length;\n                if (propertyIndex > 0) {\n                    // remove the comma of the previous node\n                    var previous = parent.children[propertyIndex - 1];\n                    removeBegin = previous.offset + previous.length;\n                }\n                else {\n                    removeBegin = parent.offset + 1;\n                    if (parent.children.length > 1) {\n                        // remove the comma of the next node\n                        var next = parent.children[1];\n                        removeEnd = next.offset;\n                    }\n                }\n                return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, formattingOptions);\n            }\n            else {\n                // set value of existing property\n                return withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, formattingOptions);\n            }\n        }\n        else {\n            if (value === void 0) {\n                return []; // property does not exist, nothing to do\n            }\n            var newProperty = JSON.stringify(lastSegment) + \": \" + JSON.stringify(value);\n            var index = getInsertionIndex ? getInsertionIndex(parent.children.map(function (p) { return p.children[0].value; })) : parent.children.length;\n            var edit = void 0;\n            if (index > 0) {\n                var previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            else if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n    }\n    else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n        var insertIndex = lastSegment;\n        if (insertIndex === -1) {\n            // Insert\n            var newProperty = \"\" + JSON.stringify(value);\n            var edit = void 0;\n            if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                var previous = parent.children[parent.children.length - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n        else {\n            if (value === void 0 && parent.children.length >= 0) {\n                //Removal\n                var removalIndex = lastSegment;\n                var toRemove = parent.children[removalIndex];\n                var edit = void 0;\n                if (parent.children.length === 1) {\n                    // only item\n                    edit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n                }\n                else if (parent.children.length - 1 === removalIndex) {\n                    // last item\n                    var previous = parent.children[removalIndex - 1];\n                    var offset = previous.offset + previous.length;\n                    var parentEndOffset = parent.offset + parent.length;\n                    edit = { offset: offset, length: parentEndOffset - 2 - offset, content: '' };\n                }\n                else {\n                    edit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n                }\n                return withFormatting(text, edit, formattingOptions);\n            }\n            else {\n                throw new Error('Array modification not supported yet');\n            }\n        }\n    }\n    else {\n        throw new Error(\"Can not add \" + (typeof lastSegment !== 'number' ? 'index' : 'property') + \" to parent of type \" + parent.type);\n    }\n    var _a;\n}\nfunction withFormatting(text, edit, formattingOptions) {\n    // apply the edit\n    var newText = applyEdit(text, edit);\n    // format the new text\n    var begin = edit.offset;\n    var end = edit.offset + edit.content.length;\n    if (edit.length === 0 || edit.content.length === 0) {\n        while (begin > 0 && !isEOL(newText, begin - 1)) {\n            begin--;\n        }\n        while (end < newText.length && !isEOL(newText, end)) {\n            end++;\n        }\n    }\n    var edits = format(newText, { offset: begin, length: end - begin }, formattingOptions);\n    // apply the formatting edits and track the begin and end offsets of the changes\n    for (var i = edits.length - 1; i >= 0; i--) {\n        var edit_1 = edits[i];\n        newText = applyEdit(newText, edit_1);\n        begin = Math.min(begin, edit_1.offset);\n        end = Math.max(end, edit_1.offset + edit_1.length);\n        end += edit_1.content.length - edit_1.length;\n    }\n    // create a single edit with all changes\n    var editLength = text.length - (newText.length - end) - begin;\n    return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n}\nexport function applyEdit(text, edit) {\n    return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\nexport function isWS(text, offset) {\n    return '\\r\\n \\t'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=edit.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as formatter from './impl/format.js';\nimport * as edit from './impl/edit.js';\nimport * as scanner from './impl/scanner.js';\nimport * as parser from './impl/parser.js';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport var createScanner = scanner.createScanner;\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport var getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport var parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport var parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport var findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport var getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport var visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport var stripComments = parser.stripComments;\n/**\n * Computes the edits needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function format(documentText, range, options) {\n    return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edits needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function modify(text, path, value, options) {\n    return edit.setProperty(text, path, value, options.formattingOptions, options.getInsertionIndex);\n}\n/**\n * Applies edits to a input string.\n */\nexport function applyEdits(text, edits) {\n    for (var i = edits.length - 1; i >= 0; i--) {\n        text = edit.applyEdit(text, edits[i]);\n    }\n    return text;\n}\n//# sourceMappingURL=main.js.map"],"names":["createScanner","scanner.createScanner","getLocation","parser.getLocation","parse","parser.parse","parseTree","parser.parseTree","findNodeAtLocation","parser.findNodeAtLocation","getNodeValue","parser.getNodeValue","visit","parser.visit","stripComments","parser.stripComments","format","formatter.format","edit.setProperty","edit.applyEdit"],"mappings":"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"}